import { nanoid } from "nanoid";
import express from "express";
import mongoose from "mongoose";

const app = express();

mongoose
  .connect("mongodb://localhost:27017/todoapp")
  .then(() => console.log("Connected to MongoDB at localhost:27017"))
  .catch((err) => console.log("Could not connect to MongoDB...", err));

const todoSchema = new mongoose.Schema(
  {
    id: { type: String, unique: true, required: true},
    task: { type: String, required: true },
    completed: { type: Boolean, default: false },
  },
  { timestamps: true }
);

todoSchema.set("toJSON", {
  transform: (doc, ret) => {
    // Remove unnecessary internal Mongoose properties
    delete ret._id; // ID generated by Mongoose
    delete ret.__v; // Version key
    delete ret.$__; // Internal Mongoose lifecycle data
    delete ret.$options; // Schema options
    delete ret.$locals; // Local data
    delete ret.$isNew; // Document status flag

    return ret;
  },
});

const Todo = mongoose.model("Todo", todoSchema);

app.use(express.json());

app.get("/todos", async (req, res) => {
  try {
    const todos = await Todo.find();
    return res.status(200).json(todos);
  } catch (err) {
    res.status(500).json({ message: err.message });
  }
});

app.get("/todos/:id", async (req, res) => {
  try {
    const { id } = req.params;
    const todo = await Todo.findOne({ id: id });

    if (!todo) return res.status(404).json({ message: "Todo not found" });
    res.json(todo);
  } catch (err) {
    res.status(500).json({ message: err.message });
  }
});

app.post("/todos", async (req, res) => {
  const { task, completed } = req.body;
  if (!task) return res.status(400).json({ message: "Task cannot be empty" });

  const newTodo = new Todo({
    id: nanoid(12),
    task,
    completed: completed || false,
  });

  try {
    const isTodoExist = await Todo.findOne({ id: newTodo.id });
    if(isTodoExist) return res.status(500).json({message: "System Generated Duplicate ID"})

    const savedTodo = await newTodo.save();
    res.status(201).json(savedTodo);
  } catch (err) {
    res.status(500).json({ message: err.message });
  }
});

app.put("/todos/:id", async (req, res) => {
  const { id } = req.params;
  const { task, completed } = req.body;

   if(!task) return res.status(400).json({ message: "Task cannot be empty" });

  try {
    const updatedTodo = await Todo.findOneAndUpdate(
      { id: id },
      { task, completed },
      { new: true }
    );

    if (!updatedTodo) return res.status(404).json({ message: "Todo not found" });
    res.json(updatedTodo);
  } catch (err) {
    res.status(500).json({ message: err.message });
  }
});

app.delete("/todos/:id", async (req, res) => {
  const { id } = req.params;

  try {
    const deletedTodo = await Todo.findOneAndDelete(id);
    if (!deletedTodo) return res.status(404).json({ message: "Todo not found" });

    res.status(200).json({ message: "Todo is successfully deleted" });
  } catch (err) {
    res.status(500).json({ message: err.message });
  }
});

const PORT = 3000;
app.listen(PORT, () => {
  console.log(`Server is currently running at http://localhost:${PORT}`);
});
