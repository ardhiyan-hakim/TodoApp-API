import { nanoid } from "nanoid";
import express from "express";
import mongoose from "mongoose";
import bcrypt from "bcryptjs";
import jwt from "jsonwebtoken";
import dotenv from "dotenv";

const app = express();
const router = express.Router();

dotenv.config();

// Middleware to parse JSON bodies
app.use(express.json());

// Connecting Mongoose to MongoDB
mongoose
  .connect(`mongodb://localhost:${process.env.MONGO_URI}/todoapp`)
  .then(() => console.log("Connected to MongoDB at localhost:27017"))
  .catch((err) => console.log("Could not connect to MongoDB...", err));

app.use("/api", router);

// Schema to store data in Database
const todoSchema = new mongoose.Schema(
  {
    id: { type: String, required: true, unique: true },
    task: { type: String, required: true },
    completed: { type: Boolean, default: false },
  },
  { timestamps: true }
);

const userSchema = new mongoose.Schema({
  username: { type: String, required: true, unique: true },
  password: { type: String, required: true },
});

userSchema.pre("save", async function (next) {
  if (!this.isModified("password")) return next();
  this.password = await bcrypt.hash(this.password, 10);
  next();
});

userSchema.methods.matchPassword = async function (password) {
  return await bcrypt.compare(password, this.password);
};

// Cleanup JSON Response for todo and user Schema
todoSchema.set("toJSON", {
  transform: (doc, ret) => {
    // Remove unnecessary internal Mongoose properties
    delete ret._id; // ID generated by Mongoose
    delete ret.__v; // Version key
    delete ret.$__; // Internal Mongoose lifecycle data
    delete ret.$options; // Schema options
    delete ret.$locals; // Local data
    delete ret.$isNew; // Document status flag

    return ret;
  },
});

const Todo = mongoose.model("Todo", todoSchema);

userSchema.set("toJSON", {
  transform: (doc, ret) => {
    delete ret._id;
    delete ret.__v;
    delete ret.$__;
    delete ret.$options;
    delete ret.$locals;
    delete ret.$isNew;
    delete ret.password;
  },
});

const User = mongoose.model("User", userSchema);

// User Routes
router.post("/register", async (req, res) => {
  try {
    const { username, password } = req.body;
    const userExists = await User.findOne({ username });

    if (userExists) {
      return res.status(400).json({ message: "User already exist" });
    }

    const user = new User({ username, password });
    await user.save();
    res.status(201).json({ message: "User created successfully" });
  } catch (err) {
    res
      .status(500)
      .json({ message: "Error registering user", error: err.message });
  }
});

router.post("/login", async (req, res) => {
  try {
    const { username, password } = req.body;
    const user = await User.findOne({ username });

    if (!user || !(await user.matchPassword(password))) {
      return res
        .status(401)
        .json({ message: "Please enter the correct username and password" });
    }

    const token = jwt.sign({ id: user.id }, `${process.env.JWT_SECRET}`, {
      expiresIn: "12h",
    });
    res.json({ token });
  } catch (err) {
    res.status(500).json({message: "Error logging in", error: err.message})
  }
});
// Todo Routes
router.get("/todos", async (req, res) => {
  try {
    const todos = await Todo.find();
    return res.status(200).json(todos);
  } catch (err) {
    res.status(500).json({ message: err.message });
  }
});

router.get("/todos/:id", async (req, res) => {
  try {
    const { id } = req.params;
    const todo = await Todo.findOne({ id: id });

    if (!todo) return res.status(404).json({ message: "Todo not found" });
    res.json(todo);
  } catch (err) {
    res.status(500).json({ message: err.message });
  }
});

router.post("/todos", async (req, res) => {
  const { task, completed } = req.body;
  if (!task) return res.status(400).json({ message: "Task cannot be empty" });

  const newTodo = new Todo({
    id: nanoid(12),
    task,
    completed: completed || false,
  });

  try {
    const isTodoExist = await Todo.findOne({ id: newTodo.id });
    if (isTodoExist)
      return res.status(500).json({ message: "System Generated Duplicate ID" });

    const savedTodo = await newTodo.save();
    res.status(201).json(savedTodo);
  } catch (err) {
    res.status(500).json({ message: err.message });
  }
});

router.put("/todos/:id", async (req, res) => {
  const { id } = req.params;
  const { task, completed } = req.body;

  if (!task) return res.status(400).json({ message: "Task cannot be empty" });

  try {
    const updatedTodo = await Todo.findOneAndUpdate(
      { id: id },
      { task, completed },
      { new: true }
    );

    if (!updatedTodo)
      return res.status(404).json({ message: "Todo not found" });
    res.json(updatedTodo);
  } catch (err) {
    res.status(500).json({ message: err.message });
  }
});

router.delete("/todos/:id", async (req, res) => {
  const { id } = req.params;

  try {
    const deletedTodo = await Todo.findOneAndDelete(id);
    if (!deletedTodo)
      return res.status(404).json({ message: "Todo not found" });

    res.status(200).json({ message: "Todo is successfully deleted" });
  } catch (err) {
    res.status(500).json({ message: err.message });
  }
});

app.get("/", (req, res) => {
  res.send("Welcome to the Todo App API!");
});

// Error Handling
app.use((err, req, res, next) => {
  console.error(err.stack);
  res.status(500).json({ message: "Internal Server Error" });
});

app.listen(process.env.PORT, () => {
  console.log(
    `Server is currently running at http://localhost:${process.env.PORT}`
  );
});
